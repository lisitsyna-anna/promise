{"mappings":"AAqFS,IAAIA,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAASC,KAAKC,SAAW,GAE/BC,YAAW,KACLH,GACFF,EAAQ,iCAGMC,EAAT,0BAA0B,GAChC,IAAK,IAITK,MAAKC,GAAUC,QAAQC,IAAIF,KAC3BG,OAAMC,GAASH,QAAQC,IAAIE","sources":["src/js/02-promisification.js"],"sourcesContent":["/*\n * Промисификация:\n * - Поблема доступа к результату промиса с колбеком\n * - Самая важная концепция: результат промиса нельзя получить нигдк, кроме как внутри\n * колбек ф-ций, которые мы передаем в then и catch, это колбек ф-ции ассинхронные,\n * и они выполняться когда нибудь потом когда Promise резолвниться или релжектниться\n * Поэтому как-то магически дать результат промиса во внешний код невозможно\n * - Функция которая возвращает промис\n */\n\n// const makeOrder = dish => {\n//   const DELAY = 1000;\n\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve('Вот ваше блюдо');\n//       }\n\n//       reject('Извините закончились продукты');\n//     }, DELAY);\n//   });\n// };\n\n// makeOrder('пирожок').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n/*\n * Промисификация «синхронных» функций\n * - Promise.resolve()\n * - Promise.reject()\n */\n\n// const makeOrder = dish => {\n//   return Promise.resolve(`Вот ваш заказ ${dish}`);\n// };\n\n// makeOrder('пирожок').then(onMakeOrderSuccess);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\n/*\n * Покемоны с https://pokeapi.co/\n */\n\n// const fetchPokemonById = id => {\n//   return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(r => r.json());\n// };\n\n// fetchPokemonById(1).then(onFetchSuccess).catch(onFetchError);\n\n// fetchPokemonById(2).then(onFetchSuccess).catch(onFetchError);\n\n// fetchPokemonById(3).then(onFetchSuccess).catch(onFetchError);\n\n// function onFetchSuccess(pokemon) {\n//   console.log('onFetchSuccess');\n//   console.log(pokemon);\n// }\n\n// function onFetchError(error) {\n//   console.log('onFetchError');\n//   console.log(error);\n// }\n\nconst makePromise = () => {\n  return new Promise((resolve, reject) => {\n    const passed = Math.random() > 0.5;\n\n    setTimeout(() => {\n      if (passed) {\n        resolve('куку, все хорошо, это resolve');\n      }\n\n      reject('все пропало, это reject');\n    }, 2000);\n  });\n};\nmakePromise()\n  .then(result => console.log(result))\n  .catch(error => console.log(error));\n"],"names":["Promise","resolve","reject","passed","Math","random","setTimeout","then","result","console","log","catch","error"],"version":3,"file":"02-promisification.235ca1f5.js.map"}