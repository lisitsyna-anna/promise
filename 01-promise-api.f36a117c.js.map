{"mappings":"AAiBgB,IAAIA,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAaC,KAAKC,SAAW,GAEnCC,YAAW,WACLH,GACFF,EAAQ,gEAEiCC,EAApC,mD,GACN,I,IA4BFK,MAhBH,SAAsBC,GACpBC,QAAQC,IAAI,2BACFD,QAAFC,IAAI,GAAUC,OAAPH,G,IAedD,MAAK,SAAAK,GAGJ,OAFAH,QAAQC,IAAIE,GAEL,E,IAERL,MAAK,SAAAM,GACJJ,QAAQC,IAAIG,E,IAEbC,OAAM,SAAAC,G,OAASN,QAAQC,IAAIK,E,IAC3BC,SAAQ,WACPP,QAAQC,IAAI,iC","sources":["src/js/01-promise-api.js"],"sourcesContent":["/*\n * Создание промиса\n *  - Класс Promise\n *  - resolve\n *  - reject\n *  - Promise.prototype.then(onResolve, onReject)\n *\n *\n * new Promise()- принимает аргументом коллбек-ф-цию, которая всегда своим параметром принимает\n * 2 аргумента - resolve и reject\n *\n * resolve(value) - функция для вызова при успешной операции.\n * Переданный ей аргумент будет значением выполненного промиса.\n *  reject(error) - функция для вызвова в случае ошибки.\n * Переданный ей аргумент будет значением отклоненного промиса.\n */\n\nconst promise = new Promise((resolve, reject) => {\n  const canFulfill = Math.random() > 0.5;\n\n  setTimeout(() => {\n    if (canFulfill) {\n      resolve('Промис выполнился успешно с результатом (исполнен fullfiled)');\n    }\n    reject('Промис выполнился с ошибкой (отклонен, rejected)');\n  }, 1000);\n});\n\n//*  метод then() - если промис выполниться успешно, тогда...\n// then(onSuccess, onError)\n// onSuccess - ф-ция будет отвечать за обработку успешного результата\n// onError - ф-ция будет отвечать за обработку ошибки\n\n// then - возращает еще один промис, и его значением будетто что возращает внутренняя колбек ф-ция\n\n// promise.then(onFullfilled, onRejected);\n\nfunction onFullfilled(result) {\n  console.log('Выполнился onFullfilled');\n  console.log(`${result}`);\n}\n\nfunction onRejected(error) {\n  console.log(' Выполнился onRejected');\n  console.log(`${error}`);\n}\n\n/*\n * Цепочки промисов (chaining)\n * Promise.prototype.catch(error)\n * Promise.prototype.finally()\n */\npromise\n  .then(onFullfilled)\n  .then(x => {\n    console.log(x);\n\n    return 10;\n  })\n  .then(y => {\n    console.log(y);\n  })\n  .catch(error => console.log(error))\n  .finally(() => {\n    console.log('Я буду выполнен в любом случае');\n  });\n"],"names":["Promise","resolve","reject","canFulfill","Math","random","setTimeout","then","result","console","log","concat","x","y","catch","error","finally"],"version":3,"file":"01-promise-api.f36a117c.js.map"}